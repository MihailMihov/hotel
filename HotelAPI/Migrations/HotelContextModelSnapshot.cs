// <auto-generated />
using System;
using HotelAPI.Data;
using HotelAPI.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HotelAPI.Migrations
{
    [DbContext(typeof(HotelContext))]
    partial class HotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HotelAPI.Models.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Floors")
                        .HasColumnType("integer")
                        .HasColumnName("floors");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("buildings_pkey");

                    b.HasIndex(new[] { "Name" }, "buildings_name_key")
                        .IsUnique();

                    b.ToTable("buildings", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<string>("Ucn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ucn");

                    b.HasKey("Id")
                        .HasName("clients_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("parking_pkey");

                    b.ToTable("parking", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_email");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("LateCheckout")
                        .HasColumnType("boolean")
                        .HasColumnName("late_checkout");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("reservations_pkey");

                    b.HasIndex("RoomId");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("integer")
                        .HasColumnName("building_id");

                    b.Property<int>("Floor")
                        .HasColumnType("integer")
                        .HasColumnName("floor");

                    b.Property<int>("KindId")
                        .HasColumnType("integer")
                        .HasColumnName("kind_id");

                    b.HasKey("Id")
                        .HasName("rooms_pkey");

                    b.HasIndex("BuildingId");

                    b.HasIndex("KindId");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.RoomKind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("room_kinds_pkey");

                    b.HasIndex(new[] { "Name" }, "room_kinds_name_key")
                        .IsUnique();

                    b.ToTable("room_kinds", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.Vehicle", b =>
                {
                    b.Property<string>("Registration")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("registration");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<int>("ParkingId")
                        .HasColumnType("integer")
                        .HasColumnName("parking_id");

                    b.HasKey("Registration")
                        .HasName("vehicles_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("ParkingId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("HotelAPI.Models.Client", b =>
                {
                    b.HasOne("HotelAPI.Models.Room", "Room")
                        .WithMany("Clients")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("clients_room_id_fkey");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelAPI.Models.Reservation", b =>
                {
                    b.HasOne("HotelAPI.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("reservations_room_id_fkey");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelAPI.Models.Room", b =>
                {
                    b.HasOne("HotelAPI.Models.Building", "Building")
                        .WithMany("Rooms")
                        .HasForeignKey("BuildingId")
                        .IsRequired()
                        .HasConstraintName("rooms_building_id_fkey");

                    b.HasOne("HotelAPI.Models.RoomKind", "Kind")
                        .WithMany("Rooms")
                        .HasForeignKey("KindId")
                        .IsRequired()
                        .HasConstraintName("rooms_kind_id_fkey");

                    b.Navigation("Building");

                    b.Navigation("Kind");
                });

            modelBuilder.Entity("HotelAPI.Models.Vehicle", b =>
                {
                    b.HasOne("HotelAPI.Models.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("vehicles_client_id_fkey");

                    b.HasOne("HotelAPI.Models.Parking", "Parking")
                        .WithMany("Vehicles")
                        .HasForeignKey("ParkingId")
                        .IsRequired()
                        .HasConstraintName("vehicles_parking_id_fkey");

                    b.Navigation("Client");

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("HotelAPI.Models.Building", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelAPI.Models.Client", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("HotelAPI.Models.Parking", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("HotelAPI.Models.Room", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelAPI.Models.RoomKind", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
